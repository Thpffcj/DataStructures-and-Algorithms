package algorithms.networkMeasurement.meituan;

/**
 * Created by Thpffcj on 2018/3/21.
 */

/**
 * 在4x4的棋盘上摆满了黑白棋子，黑白两色的位置和数目随机其中左上角坐标为(1,1),右下角坐标为(4,4),现在依次有一些翻转操作，
 * 要对一些给定支点坐标为中心的上下左右四个棋子的颜色进行翻转，请计算出翻转后的棋盘颜色。
 * 给定两个数组A和f,分别为初始棋盘和翻转位置。其中翻转位置共有3个。请返回翻转后的棋盘。
 *
 * 测试样例：
 * [[0,0,1,1],[1,0,1,0],[0,1,1,0],[0,0,1,0]],[[2,2],[3,3],[4,4]]
 * 返回：[[0,1,1,1],[0,0,1,0],[0,1,1,0],[0,0,1,0]]
 * 0011  0111  0111  0111
 * 1010  0000  0010  0010
 * 0110  0010  0111  0110
 * 0010  0010  0000  0010
 * [[0,1,0,0],[1,0,1,0],[1,1,0,0],[1,0,0,1]],[[2,3],[4,2],[2,3]]
 */
public class Flip {

    public int[][] flipChess(int[][] A, int[][] f) {
        for (int i = 0; i < f.length; i++) {
            int x = f[i][0] - 1;
            int y = f[i][1] - 1;
            if (x - 1 >= 0) {
                A[x - 1][y] = A[x - 1][y] == 0 ? 1 : 0;
            }
            if (x + 1 < 4) {
                A[x + 1][y] = A[x + 1][y] == 0 ? 1 : 0;
            }
            if (y - 1 >= 0) {
                A[x][y - 1] = A[x][y - 1] == 0 ? 1 : 0;
            }
            if (y + 1 < 4) {
                A[x][y + 1] = A[x][y + 1] == 0 ? 1 : 0;
            }
        }
        return A;
    }
}
